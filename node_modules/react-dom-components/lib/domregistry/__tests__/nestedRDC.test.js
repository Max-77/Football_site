"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _index = require("../../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

document.body.innerHTML = '<div><hello-world data-name="Name" data-title="My Title">Hello World<my-title>The Real Title</my-title></hello-world></div>';

function Title(props) {
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("h2", null, _react.default.createElement("b", null, props.children)));
}

function HelloWorld(props) {
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(Title, null, props.title), _react.default.createElement("p", null, "Nested Title:"), _react.default.createElement(Title, null, props['my-title'].props.text), _react.default.createElement("p", null, props.text, " ", props.name));
}

var TitleModel =
/*#__PURE__*/
function (_DOMModel) {
  _inherits(TitleModel, _DOMModel);

  function TitleModel(element) {
    var _this;

    _classCallCheck(this, TitleModel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TitleModel).call(this, element));

    _this.getTextContent();

    return _this;
  }

  return TitleModel;
}(_index.DOMModel);

var HelloWorldModel =
/*#__PURE__*/
function (_DOMModel2) {
  _inherits(HelloWorldModel, _DOMModel2);

  function HelloWorldModel(element) {
    var _this2;

    _classCallCheck(this, HelloWorldModel);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HelloWorldModel).call(this, element));

    _this2.getDataAttribute('name');

    _this2.getAttribute('data-title', 'title');

    _this2.getTextContent();

    _this2.getChildDOMModel('my-title', TitleModel);

    return _this2;
  }

  return HelloWorldModel;
}(_index.DOMModel);

var helloWorldComponent = (0, _index.createRDC)('hello-world', HelloWorldModel, HelloWorld);
var titleComponent = (0, _index.createRDC)('my-title', TitleModel, Title);
describe('Nested React Dom Component', function () {
  var domRegistry = new _index.DOMRegistry(_react.default, _reactDom.render);
  domRegistry.register({
    helloWorldComponent: helloWorldComponent
  });
  domRegistry.init();
  it('should render', function () {
    var tree = _reactTestRenderer.default.create(domRegistry.components['helloWorldComponent'].rendered[0].reactElement).toJSON();

    expect(tree).toMatchSnapshot();
  });
  it('should modify the current DOM', function () {
    expect(document.body.innerHTML).toBe('<div><hello-world data-name=\"Name\" data-title=\"My Title\"><h2><b>My Title</b></h2><p>Nested Title:</p><h2><b>The Real Title</b></h2><p>Hello World Name</p></hello-world></div>');
  });
  it('should populate childDOMModel my-title', function () {
    expect(domRegistry.components['helloWorldComponent'].rendered[0].reactElement.props['my-title']).toBeInstanceOf(TitleModel);
  });
});