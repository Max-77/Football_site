"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Utility function to verify that the React and render objects are valid.
 * @param {*} react React from 'react'
 * @param {*} reactDOMRender { render } from 'react-dom'
 */
var verifyReactObjects = function verifyReactObjects(react, reactDOMRender) {
  if (!react || typeof react.createElement !== 'function' || typeof react.Component !== 'function') {
    console.warn('DOMRegistry: Invalid React object passed in.  Please verify the React parameter passed to DOMRegistry');
    return false;
  }

  var reactMajorVersion = react.version ? parseInt(react.version.split('.')[0]) : 0;

  if (reactMajorVersion < 16) {
    console.warn('DOMRegistry: Invalid React version.  React >= 16 must be used.  React major version detected: ', reactMajorVersion);
    return false;
  }

  if (typeof reactDOMRender !== 'function') {
    console.warn('DOMRegistry: Invalid reactDOMRender function passed in.  Please verify that `render` from `react-dom` is passed in.');
    return false;
  }

  return true;
};
/* global document, MutationObserver */

/**
 * The <code>DOMRegistry</code> Class is used to register, find, and
 * render React DOM Components. It provides a mechanism to determine if
 * a registered DOM Component is a child of an existing DOM Component.
 */


var DOMRegistry =
/*#__PURE__*/
function () {
  /**
   * DOMRegistry Constructor.  Pass in the React (from 'react') and render (from 'react-dom') objects
   * to use in rendering the DOMComponents.
   * @param {object} React The main React object
   * @param {function} reactDOMRender The render function from ReactDOM
   */
  function DOMRegistry(React, reactDOMRender) {
    _classCallCheck(this, DOMRegistry);

    verifyReactObjects(React, reactDOMRender);
    this.React = React;
    this.reactDOMRender = reactDOMRender;
    this.components = {};
  }
  /**
   * Register components for the registry to process
   * @param {object} components Object containing RDC components to register.  The key will be used as the
   */


  _createClass(DOMRegistry, [{
    key: "register",
    value: function register(components) {
      if (!this.components) {
        this.components = components;
      } else {
        this.components = Object.assign(this.components, components);
      }

      this.getNodeNames();
    }
    /**
     * Initialize the supplied element to find
     * child components and render them.
     *
     * @param {element} element (including children) to check for RDCs, defaults to `document`
     */

  }, {
    key: "init",
    value: function init() {
      var _this = this;

      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
      this.element = element; // Loop through all registred DOM Components

      var compArray = Object.keys(this.components);
      compArray.forEach(function (name) {
        _this.renderAll(_this.element, _this.components[name]);
      });
    }
    /**
     * Render the component. If an element is not supplied,
     * the element class property will be used to find all
     * nodes to be rendered.
     * @param {DOMComponent} component - component to render
     * @param {HTMLElement} element
     */

  }, {
    key: "render",
    value: function render(component, element) {
      if (element) {
        component.render(element, this.React, this.reactDOMRender, this.element);
      } else {
        this.renderAll(this.element, component);
      }
    }
    /**
     * Render All of the matching components
     * @param {element} parentElement
     * @param {object} component RDC component to render
     */

  }, {
    key: "renderAll",
    value: function renderAll(parentElement, component) {
      var _this2 = this;

      // Find all potential nodes of the components
      var componentNodes = parentElement.querySelectorAll(component.nodeName); // Loop through each node and determine if we can render it.

      Array.prototype.forEach.call(componentNodes, function (componentNode) {
        var canRender = _this2.traverseUpDom(componentNode);

        if (canRender) {
          component.render(componentNode, _this2.React, _this2.reactDOMRender, _this2.element);
        }
      });
    }
    /**
     * Traverse up the DOM from the supplied node to see if any parents
     * are React DOM Components.
     * @return {boolean} canRender Whether the component can render with React.
     */

  }, {
    key: "traverseUpDom",
    value: function traverseUpDom(node) {
      var parentNode = node.parentNode; // If the DOM has already been swapped out by React, the parent node will be null.

      if (parentNode !== null) {
        var parentNodeName = parentNode.nodeName.toLowerCase();

        if (this.nodeNames.includes(parentNodeName)) {
          return false;
        } else if (parentNodeName === 'body') {
          return true;
        }

        this.traverseUpDom(parentNode);
        return true;
      }

      return false;
    }
    /**
     * Create an array of element node names to look for.
     * @return {array} nodeNames
     */

  }, {
    key: "getNodeNames",
    value: function getNodeNames() {
      var _this3 = this;

      this.nodeNames = [];
      var compArray = Object.keys(this.components);
      compArray.forEach(function (name) {
        _this3.nodeNames.push(_this3.components[name].nodeName);
      });
    }
  }]);

  return DOMRegistry;
}();

exports.default = DOMRegistry;